'use strict';

<%="// This file is automatically generated from gb18030.js.jstp"%>

const common = require('./common');
const EOF = common.EOF;
const CONTINUE = common.CONTINUE;
const ERROR = common.ERROR;

const decodeMap = <%
	// indexes.json is from https://encoding.spec.whatwg.org/indexes.json
	let indexes = JSON.parse(require('fs').readFileSync('../../cache/indexes.json', 'utf-8'));
	print(JSON.stringify(indexes.gb18030));
%>;

const decodeRangeMap = <%= JSON.stringify(indexes["gb18030-ranges"]) %> ;

function Decoder() {
	this[0] = 0;
	this[1] = 0;
	this[2] = 0;
}

function rangeCodePointFor(pointer) {
	if ((pointer > 39419 && pointer < 189000) || (pointer > 1237575))
		return null;
	for (let i = decodeRangeMap.length - 1; i >= 0; i--) {
		if (decodeRangeMap[i][0] <= pointer) {
			return decodeRangeMap[i][1] + pointer - decodeRangeMap[i][0];
		}
	}
	return null;
}

Decoder.prototype.handler = function(stream, byte) {
	// Initial byte
	if (this[0] === 0) {
		if (byte === EOF) {
			return EOF;
		}
		// Map ASCII characters directly
		if (byte <= 0x7F) {
			return byte;
		}
		// 0x80 maps to â‚¬
		if (byte === 0x80) {
			return 0x20AC;
		}
		// 0xFF is invalid for GB10830
		if (byte === 0xFF) {
			return ERROR;
		}
		// Shift first byte
		this[0] = byte;
		return CONTINUE;
	}

	// EOF should not be encountered for incomplete shift sequence
	if (byte === EOF) {
		this[0] = this[1] = this[2] = 0;
		return ERROR;
	}

	// Second byte
	if (this[1] === 0) {
		// 0x30 - 0x39 indicate that it is a 4-byte code point
		if (byte >= 0x30 && byte <= 0x39) {
			this[1] = byte;
			return CONTINUE;
		}

		// 0xFF is invalid for GB10830
		if (byte == 0xFF) {
			this[0] = 0;
			return ERROR;
		}

		// 0x7F, 0x00-0x30 are invalid as second byte
		if (byte == 0x7F || byte < 0x30) {
			this[0] = 0;
			stream.prepend(byte);
			return ERROR;
		}

		let offset = byte < 0x7F ? 0x40 : 0x41;
		let pointer = (this[0] - 0x81) * 190 + (byte - offset);
		this[0] = 0;

		// Code point not available
		let codepoint = decodeMap[pointer];
		if (codepoint === null) {
			this[0] = 0;
			if (byte <= 0x7F)
				stream.prepend(byte);
			return ERROR;
		}
		return codepoint;
	}

	// Third byte
	if (this[2] === 0) {
		// 0x81 - 0xFE is required
		if (byte >= 0x81 && byte <= 0xFE) {
			this[2] = byte;
			return CONTINUE;
		}

		// It is an error, so we skip the first byte and retry
		stream.prepend(this[1], byte);
		this[0] = this[1] = 0;
		return ERROR;
	}

	// Fourth byte
	{
		if (byte >= 0x30 && byte <= 0x39) {
			let codepoint = rangeCodePointFor((((this[0] - 0x81) * 10 + this[1] - 0x30) * 126 + this[2] - 0x81) * 10 + byte - 0x30);
			this[0] = this[1] = this[2] = 0;
			if (codepoint !== null)
				return codepoint;
		}

		// It is an error, so we skip the first byte and retry
		stream.prepend(this[1], this[2], byte);
		this[0] = this[1] = this[2] = 0;
		return ERROR;
	}
}

function* Encoder(gbk) {
	gbk = gbk || false;
	while (true) {
		let codepoint = yield;
		if (codepoint === -1) {
			return;
		}
		if (codepoint <= 0x7F) {
			yield codepoint;
			continue;
		}
		if (gbk && codepoint === 0x20AC) {
			yield 0x80;
			continue;
		}
		let pointer = decodeMap.indexOf(codepoint);
		if(pointer !== -1) {
			let lead = ((pointer / 190) | 0) + 0x81;
			let trail = pointer % 190;
			let offset = trail < 0x3F ? 0x40 : 0x41;
			yield lead;
			yield trail + offset;
			continue;
		}
		if (gbk) {
			yield -codepoint;
			continue;
		}
		throw 'TODO: GB10830 Range';
	}
}

exports.decoder = Decoder;
exports.encoder = Encoder;