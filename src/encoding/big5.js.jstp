'use strict';

<%="// This file is automatically generated from big5.js.jstp"%>

const common = require('./common');
const EOF = common.EOF;
const CONTINUE = common.CONTINUE;
const ERROR = common.ERROR;

const decodeMap = <%
	// indexes.json is from https://encoding.spec.whatwg.org/indexes.json
	let indexes = JSON.parse(require('fs').readFileSync('../../cache/indexes.json', 'utf-8'));
	print(JSON.stringify(indexes.big5));
%>;

function Decoder() {
	this.lead = 0;
	this.next = 0;
}

Decoder.prototype.handler = function(stream, byte) {
	// For two-byte mapping
	if(this.next){
		stream.prepend(byte);
		let ret = this.next;
		this.next = 0;
		return ret;
	}

	// Initial byte
	if (this.lead === 0) {
		if (byte === EOF) {
			return EOF;
		}
		// Map ASCII characters directly
		if (byte <= 0x7F) {
			return byte;
		}
		// 0x80 & 0xFF are invalid for Big5
		if (byte === 0x80 || byte === 0xFF) {
			return ERROR;
		}
		// Shift first byte
		this.lead = byte;
		return CONTINUE;
	}

	// EOF should not be encountered for incomplete shift sequence
	if(byte === EOF){
		this.lead = 0;
		return ERROR;
	}

	let offset = byte < 0x7F ? 0x40 : 0x62;
	if (byte >= 0x40 && byte <= 0x7E || byte >= 0xA1 && byte <= 0xFE) {
		let pointer = (this.lead - 0x81) * 157 + (byte - offset);
		this.lead = 0;

		// 2 code point mapping
		if (pointer === 1133) {
			this.next = 0x0304;
			return 0x00CA;
		} else if (pointer === 1135) {
			this.next = 0x030C;
			return 0x00CA;
		} else if (pointer === 1164) {
			this.next = 0x0304;
			return 0x00EA;
		} else if (pointer === 1166) {
			this.next = 0x030C;
			return 0x00EA;
		}

		let codepoint = decodeMap[pointer];
		if (codepoint !== null) {
			return codepoint;
		}
	}

	this.lead = 0;
	if (byte <= 0x7F)
		stream.prepend(byte);
	return ERROR;
}

function* Encoder() {
	while (true) {
		let codepoint = yield;
		if (codepoint === -1) {
			return;
		}
		if (codepoint <= 0x7F) {
			yield codepoint;
			continue;
		}
		let pointer = decodeMap.indexOf(codepoint);
		if (pointer === -1) {
			yield -codepoint;
			continue;
		}
		let lead = ((pointer / 157) | 0) + 0x81;
		if (lead < 0xA1) {
			yield -codepoint;
			continue;
		}
		let trail = pointer % 157;
		let offset = trail < 0x3F ? 0x40 : 0x62;
		yield lead;
		yield trail + offset;
		continue;
	}
}

exports.decoder = Decoder;
exports.encoder = Encoder;